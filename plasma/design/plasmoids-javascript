Writing Plasmoids With JavaScript
=================================

If you have not done so already, please read the "plasmoid" design document first.

What Is A Simplified JavaScript Plasmoid?
=========================================
This document describes the native Plasma API available to Simplified JavaScript Plasmoids. What makes them "Simplified" is that they do not have access to the entire C++ API in the Plasma, KDE and Qt libraries (let alone things lower in the API stack). This helps ensure that these Plasmoids are more likely to work properly between releases as changes in underlying API don't affect them as well as allowing Plasma to offer stronger security guarantees around them.

To denote that this Plasmoid is a Simplified JavaScript widget, ensure that in the metadata.desktop file there is this line:

X-Plasma-API=javascript

What follows is a description of the runtime environment available to a Simplified JavaScript Plasmoid.

QtScript
========
The Simplified JavaScript API is powered by Qt's QtScript system which provides access to a full featured ECMA Script interpreter. If it works in ECMA Script, it will work in a Simplified JavaScript Plasmoid. As an interesting implementation note, QtScript uses the high performance ECMA Script interpreter from WebKit and shares this code with QtWebKit.

On top of the ECMA Script language, QtScript provides Qt integration features. Probably the most useful one in this context is the use of signals and slots which is Qt's callback mechanism. Signals may be emitted in QtScript by calling the signal method in question, a signal can be connected to a slot by using the connect() method (and disconnected with diconnnect()) and any function defined in the Plasmoid may be used as a slot. For example:

    function onClick()
    {
        print("We got clicked!")
    }

    function onFirstClick()
    {
        print("First click!")
        button.clicked.disconnect(onFirstClick)
    }

    button = new PushButton
    button.clicked.connect(onClick)
    button.clicked.connect(onFirstClick)
    button.clicked()

This will print out:

We got clicked!
First click!

on the console when the Plasmoid starts, and the "We got clicked!" again whenever the button is clicked by the user.

The Global plasmoid Object
===================
There is a global object available to the Plasmoid called, appropriately, "plasmoid". It has a number of useful properties (some of which are read only, but many of which are read/write), functions, constant values and callbacks. Each are enumerated below.

Callbacks
---------
There are some events that are generated by Plasma for the Plasmoid. These can often be caught by providing a function assigned to a specific name in the plasmoid object. For instance, to get notified of form factor changes, one would provide a formFactorChanged method as follows:

plasmoid.formFactorChanged = function()
{
    print("the form factor has changed to: " + plasmoid.formFactor())
}

Environment
----------
A set of read-only properties (and in most cases notification functions) that tell the plasmoid about its current environment:
 * apiVersion: the integer version of the Simlified JavaScript API in the current execution environment; can be used to change behaviour or usage of functions depending on the version number.
 * formFactor: one of Planar (e.g. on a desktop or in an application main view), Horizontal, Vertical or MediaCenter.
   When the form factor changes, the plasmoid.formFactorChanged function, if defined in the Plasmoid, is called.
 * location: one of Floating (no specific location), Desktop (on the application's main view are), FullScreen, LeftEdge, RightEdge, TopEdge or ButtomEdge
   When the location changes, the plasmoid.locatationChanged function, if defined in the Plasmoid, is called.
 * immutable: this property is set to true when the Plasmoid is set to not be movable or otherwise changeable, and false otherwise. Configuration is still usually allowed in this state.
   When the immutability changes, the plasmoid.immutabilityChanged function, if defined in the Plasmoid, is called.
 * currentActivity: the current contextual activity name
   When the current activity changes, the plasmoid.currentActivityChanged function, if defined in the Plasmoid, is called.
 * shouldConserveResources: true if the plasmoid should not be doing anything that would create too much draw on power, e.g. when on a device with low battery power it may be a good idea not to run a computationally expensive but optional animation

Properties
----------
A set of read/write properties that allow the Plasmoid to set various visual or functional properties:
 * aspectRatioMode: defines how to treat the aspect ratio of a Plasmoid when resizing it, one of:
    * IgnoreAspectRatio: The Plasmoid can be freely resized
    * KeepAspectRatio: The Plasmoid keeps a fixed aspect ratio
    * Square: The Plasmoid is always a square
    * ConstrainedSquare: The Plasmoid is no wider (in horizontal formfactors) or no higher (in vertical ones) than a square
    * FixedSize: The Plasmoid cannot be resized
 * busy: set to true when the Plasmoid is currently processing or waiting for data and the user interface should be blocked while doing so; will generally show a full-Plasmoid animated overlay to denote business

Geometry
-------
Functions:
 * resize(width, height)
 * setMinimumSize(width, height)
 * setPreferredSize(width, height)

Properties:
 * rect: the current rect of the Plasmoid; note that the top left may be not be the origin point (0,0); this property is read only

Painting and Layout
-------------------
Functions:
 * update() triggers a full repaint of the Plasmoid
 * update(QRectF) triggers a repaint of the rect area of the Plasmoid
 * failedToLaunch(bool failed, string reason) sets the launch status of the Plasmoid; if set to true, the script will stop executing and the reason message, if any, will be displayed to the user

Properties:
 * layout: the QGraphicsLayout associated with the Plasmoid for laying out top level items; this property is read-write, though the property is not usually set as one can simply do "new LinearLayout" (or one of the other layout classes provided) and it will be automatically associated with the Plasmoid

Access To Packaged Files
------------------------
Functions:
 * string file(string type, string fileName): returns the path to a file named fileName in the Plasmoid package of the given type; e.g. file("images", "mypixmap.png")

 * string file(string type): returns the path to a file named as part of the package, e.g.: file("mainscript")

User Interface Elements
=======================

Types of Widgets
----------------
BusyWidget
  * boolean running
  * string label
  * function clicked()

CheckBox
  * string text
  * string image
  * string styleSheet
  * boolean isChecked
  * function toggled(bool)

ComboBox
  * string text
  * string styleSheet
  * function activated(QString)
  * function textChanged(QString)
  * function clear()

FlashingLabel
  * boolean autohide
  * object color
  * number duration
  * function kill()
  * function fadeIn()
  * function fadeOut()
  * function flash(QString,int,QTextOption)
  * function flash(QString,int)
  * function flash(QString)
  * function flash(QPixmap,int,Qt::Alignment)
  * function flash(QPixmap,int)
  * function flash(QPixmap)

Frame
  * number frameShadow
  * string text
  * string image
  * string styleSheet
  * number Plain
  * number Raised
  * number Sunken

GroupBox
  * string text
  * string styleSheet

IconWidget
  * string text
  * string infoText
  * object icon
  * object textBackgroundColor
  * object iconSize
  * string svg
  * undefined action
  * number orientation
  * number numDisplayLines
  * function pressed(bool)
  * function clicked()
  * function doubleClicked()
  * function activated()
  * function changed()
  * function setPressed(bool)
  * function setPressed()
  * function setUnpressed()
  * function setIcon(QString)

ItemBackground
  * object target
  * object targetItem
  * function appearanceChanged()
  * function animationStep(qreal)
  * function targetReached(QRectF)
  * function targetItemReached(QGraphicsItem*)

Label
  * string text
  * string image
  * number alignment
  * boolean hasScaledContents
  * string styleSheet
  * function linkActivated(QString)
  * function linkHovered(QString)
  * function dataUpdated(QString,Plasma::DataEngine::Data)

LineEdit
  * string text
  * boolean isClearButtonShown
  * string styleSheet
  * function editingFinished()
  * function returnPressed()
  * function textEdited(QString)
  * function textChanged(QString)

Meter
  * number minimum
  * number maximum
  * number value
  * string svg
  * number meterType
  * function dataUpdated(QString,Plasma::DataEngine::Data)
  * number BarMeterHorizontal
  * number BarMeterVertical
  * number AnalogMeter

PushButton
  * string text
  * string image
  * undefined action
  * object icon
  * boolean checkable
  * boolean checked
  * boolean down
  * function pressed()
  * function released()
  * function clicked()
  * function toggled(bool)

RadioButton
  * string text
  * string image
  * string styleSheet
  * boolean isChecked
  * function toggled(bool)

ScrollBar
  * number singleStep
  * number pageStep
  * number value
  * number minimum
  * number maximum
  * function valueChanged(int)
  * function setValue(int)
  * function setOrientation(Qt::Orientation)

Separator
  * number orientation

SignalPlotter
  * string title
  * string unit
  * boolean useAutoRange
  * number horizontalScale
  * boolean showVerticalLines
  * object verticalLinesColor
  * number verticalLinesDistance
  * boolean verticalLinesScroll
  * boolean showHorizontalLines
  * object horizontalLinesColor
  * object fontColor
  * number horizontalLinesCount
  * boolean showLabels
  * boolean showTopBar
  * object backgroundColor
  * string svgBackground
  * boolean thinFrame
  * boolean stackPlots

Slider
  * number maximum
  * number minimum
  * number value
  * number orientation
  * string styleSheet
  * function sliderMoved(int)
  * function valueChanged(int)
  * function setMaximum(int)
  * function setMinimum(int)
  * function setRange(int,int)
  * function setValue(int)
  * function setOrientation(Qt::Orientation)

SpinBox
  * number maximum
  * number minimum
  * number value
  * string styleSheet
  * function sliderMoved(int)
  * function valueChanged(int)
  * function editingFinished()
  * function setMaximum(int)
  * function setMinimum(int)
  * function setRange(int,int)
  * function setValue(int)

SvgWidget
  * undefined svg
  * string elementID
  * function clicked(Qt::MouseButton)

TabBar
  * number currentIndex
  * number count
  * string styleSheet
  * boolean tabBarShown
  * function currentChanged(int)
  * function setCurrentIndex(int)
  * function insertTab(int,QIcon,QString,QGraphicsLayoutItem*)
  * function insertTab(int,QIcon,QString)
  * function insertTab(int,QString,QGraphicsLayoutItem*)
  * function insertTab(int,QString)
  * function addTab(QIcon,QString,QGraphicsLayoutItem*)
  * function addTab(QIcon,QString)
  * function addTab(QString,QGraphicsLayoutItem*)
  * function addTab(QString)
  * function removeTab(int)
  * function takeTab(int)
  * function tabAt(int)
  * function setTabText(int,QString)
  * function tabText(int)
  * function setTabIcon(int,QIcon)
  * function tabIcon(int)

TextEdit
  * string text
  * boolean readOnly
  * function textChanged()
  * function dataUpdated(QString,Plasma::DataEngine::Data)

ToolButton
  * string text
  * boolean autoRaise
  * string image
  * undefined action
  * function clicked()
  * function pressed()
  * function released()

TreeView
  * undefined model
  * string styleSheet

VideoWidget
  * string url
  * number currentTime
  * number totalTime
  * number remainingTime
  * number usedControls
  * boolean controlsVisible
  * string styleSheet
  * function tick(qint64)
  * function aboutToFinish()
  * function nextRequested()
  * function previousRequested()
  * function play()
  * function pause()
  * function stop()
  * function seek(qint64)
  * function mediaObject()
  * function audioOutput()
  * number NoControls
  * number Play
  * number Pause
  * number Stop
  * number PlayPause
  * number Previous
  * number Next
  * number Progress
  * number Volume
  * number OpenFile
  * number DefaultControls

WebView
  * object url
  * string html
  * boolean dragToScroll
  * object scrollPosition
  * object contentsSize
  * object viewportGeometry
  * function loadProgress(int)
  * function loadFinished(bool)

Layouts
-------
LinearLayout
AnchorLayout

Creating Items From UI Files
----------------------------

Animations
==========
An animation object can be retrieved by calling the animation(string) method.
The string corresponds to the Plasma::Animator::Animation enumeration, and currently
the following are supported (case insensitive) along with a list of their properties:

* fade
* grow
* expand
* pause
* pulse
* rotate
* rotateStacked
* slide

All animations support the following properties:

* duration (int): length of the animation in ms
* widgetToAnimate: the QGraphicsWidget (e.g. a Plasma::Widget) to operate on
* forwards (bool): true if the animation should play forwards or false if backwards (rewind)
* visible (bool): whether or not the animation is currently visible (??!?!)

By default the animation object is associated with the plasmoid itself. By setting
the widgetToAnimate property, however, it can be re-assigned to any QGraphicsWidget
(e.g. Plasma widgets such as push buttons, sliders, etc) one wants.

Animations may also be put into groups for convenient sequential or parallel running
by creating an AnimationGroup object and then calling add(widget) on it. The parallel (bool)
property holds whether or not the animations should be run in parallel or sequentially.
The default is sequential.

Painting
========

SVG Images
---------
PlasmaSvg
PlasmaFrameSvg

Painting on the Canvas
----------------------
plasmoid.paintInterface = function(painter)
QPainter
QFont
QRectF
QSizeF
QPoint

Accessing Sources of Data
=========================
dataEngine(string name)
dataUpdate

Configuration
=============
Declaring Config Values
-----------------------
KConfigXt XML -> main.xml

Accessing Configuration Data
----------------------------
activeConfig
plasmoid.readConfig(string)
WriteConfig(string, var)

User Customization
------------------
Qt UI file
configChanged()

Other Functions and Classes
===========================
print(string)
GraphicsItem
Timer
Url
