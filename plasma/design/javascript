Writing Plasmoids With JavaScript
=================================

If you have no done so already, please read the "plasmoid" design document first.

What Is A Simplified JavaScript Plasmoid?
=========================================
This document describes the native Plasma API available to Simplified JavaScript Plasmoids. What makes them "Simplified" is that they do not have access to the entire C++ API in the Plasma, KDE and Qt libraries (let alone things lower in the API stack). This helps ensure that these Plasmoids are more likely to work properly between releases as changes in underlying API don't affect them as well as allowing Plasma to offer stronger security guarantees around them.

The Plasmoid Package
===================

A Plasmoid package
Structure
---------
http://techbase.kde.org/Projects/Plasma/Package

Installing and Replacing
------------------------
plasmapkg

The plasmoid Object
===================
Environment
----------
A set of read-only properties (and in most cases notification functions) that tell the plasmoid about its current environment:
 * formFactor: one of Planar (e.g. on a desktop or in an application main view), Horizontal, Vertical or MediaCenter.
   When the form factor changes, the plasmoid.formFactorChanged function, if defined in the Plasmoid, is called.

 * location: one of Floating (no specific location), Desktop (on the application's main view are), FullScreen, LeftEdge, RightEdge, TopEdge or ButtomEdge
   When the location changes, the plasmoid.locatationChanged function, if defined in the Plasmoid, is called.

 * immutable: this property is set to true when the Plasmoid is set to not be movable or otherwise changeable, and false otherwise. Configuration is still usually allowed in this state.
   When the immutability changes, the plasmoid.immutabilityChanged function, if defined in the Plasmoid, is called.

 * currentActivity: the current contextual activity name
   When the current activity changes, the plasmoid.currentActivityChanged function, if defined in the Plasmoid, is called.

 * shouldConserveResources: true if the plasmoid should not be doing anything that would create too much draw on power, e.g. when on a device with low battery power it may be a good idea not to run a computationally expensive but optional animation

Properties
----------
A set of read/write properties that allow the Plasmoid to set various visual or functional properties:
 * aspectRatioMode: defines how to treat the aspect ratio of a Plasmoid when resizing it, one of:
    * IgnoreAspectRatio: The Plasmoid can be freely resized
    * KeepAspectRatio: The Plasmoid keeps a fixed aspect ratio
    * Square: The Plasmoid is always a square
    * ConstrainedSquare: The Plasmoid is no wider (in horizontal formfactors) or no higher (in vertical ones) than a square
    * FixedSize: The Plasmoid cannot be resized

 * busy: set to true when the Plasmoid is currently processing or waiting for data and the user interface should be blocked while doing so; will generally show a full-Plasmoid animated overlay to denote business

Geometry
-------
Functions:
 * resize(width, height)
 * setMinimumSize(width, height)
 * setPreferredSize(width, height)

Properties:
 * rect: the current rect of the Plasmoid; note that the top left may be not be the origin point (0,0); this property is read only


Painting and Layout
-------------------
Functions:
 * update() triggers a full repaint of the Plasmoid

 * update(QRectF) triggers a repaint of the rect area of the Plasmoid

 * failedToLaunch(bool failed, string reason) sets the launch status of the Plasmoid; if set to true, the script will stop executing and the reason message, if any, will be displayed to the user

Properties:
 * layout: the QGraphicsLayout associated with the Plasmoid for laying out top level items; this property is read-write, though the property is not usually set as one can simply do "new LinearLayout" (or one of the other layout classes provided) and it will be automatically associated with the Plasmoid

Access To Packaged Files
------------------------
Functions:
 * string file(string type, string fileName): returns the path to a file named fileName in the Plasmoid package of the given type; e.g. file("images", "mypixmap.png")

 * string file(string type): returns the path to a file named as part of the package, e.g.: file("mainscript")

User Interface Elements
=======================

Types of Widgets
----------------
BusyWidget
CheckBox
ComboBox
FlashingLabel
Frame
GroupBox
IconWidget
Label
LineEdit
Meter
PushButton
RadioButton
ScrollBar
SignalPlotter
Slider
SvgWidget
TabBar
TextEdit
ToolButton
TreeView
WebView

Layouts
-------
GridLayout
LinearLayout

Creating Items By Hand
----------------------
createWidget
createLayout

Creating Items From UI Files
----------------------------

Animations
==========
An animation object can be retrieved by calling the animation(string) method.
The string corresponds to the Plasma::Animator::Animation enumeration, and currently
the following are supported (case insensitive) along with a list of their properties:

* fade
* grow
* expand
* pause
* pulse
* rotate
* rotateStacked
* slide

All animations support the following properties:

* duration (int): length of the animation in ms
* widgetToAnimate: the QGraphicsWidget (e.g. a Plasma::Widget) to operate on
* forwards (bool): true if the animation should play forwards or false if backwards (rewind)
* visible (bool): whether or not the animation is currently visible (??!?!)

By default the animation object is associated with the plasmoid itself. By setting
the widgetToAnimate property, however, it can be re-assigned to any QGraphicsWidget
(e.g. Plasma widgets such as push buttons, sliders, etc) one wants.


Animations may also be put into groups for convenient sequential or parallel running
by creating an AnimationGroup object and then calling add(widget) on it. The parallel (bool)
property holds whether or not the animations should be run in parallel or sequentially.
The default is sequential.

Painting
========

SVG Images
---------
PlasmaSvg
PlasmaFrameSvg

Painting on the Canvas
----------------------
plasmoid.paintInterface = function(painter)
QPainter
QFont
QRectF
QSizeF
QPoint

Accessing Sources of Data
=========================
dataEngine(string name)
dataUpdate

Configuration
=============
Declaring Config Values
-----------------------
KConfigXt XML -> main.xml

Accessing Configuration Data
----------------------------
activeConfig
plasmoid.readConfig(string)
WriteConfig(string, var)

User Customization
------------------
Qt UI file
configChanged()

Other Functions and Classes
===========================
print(string)
GraphicsItem
Timer
Url
