/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -c KWinAdaptor -m -p kwinadaptor -- org.kde.KWin.xml
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef KWINADAPTOR_H_276481152054086
#define KWINADAPTOR_H_276481152054086

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.kde.KWin
 */
class KWinAdaptor: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.KWin"; }

public:
    KWinAdaptor(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~KWinAdaptor();

public Q_SLOTS: // METHODS
    inline Q_NOREPLY void cascadeDesktop()
    {
        QList<QVariant> argumentList;
        callWithArgumentList(QDBus::NoBlock, QLatin1String("cascadeDesktop"), argumentList);
    }

    inline QDBusReply<void> circulateDesktopApplications()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("circulateDesktopApplications"), argumentList);
    }

    inline QDBusReply<int> currentDesktop()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("currentDesktop"), argumentList);
    }

    inline QDBusReply<void> doNotManage(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(name);
        return callWithArgumentList(QDBus::Block, QLatin1String("doNotManage"), argumentList);
    }

    inline Q_NOREPLY void killWindow()
    {
        QList<QVariant> argumentList;
        callWithArgumentList(QDBus::NoBlock, QLatin1String("killWindow"), argumentList);
    }

    inline QDBusReply<void> nextDesktop()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("nextDesktop"), argumentList);
    }

    inline QDBusReply<void> previousDesktop()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("previousDesktop"), argumentList);
    }

    inline Q_NOREPLY void reconfigure()
    {
        QList<QVariant> argumentList;
        callWithArgumentList(QDBus::NoBlock, QLatin1String("reconfigure"), argumentList);
    }

    inline QDBusReply<void> refresh()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("refresh"), argumentList);
    }

    inline QDBusReply<bool> setCurrentDesktop(int desktop)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(desktop);
        return callWithArgumentList(QDBus::Block, QLatin1String("setCurrentDesktop"), argumentList);
    }

    inline QDBusReply<void> setDesktopLayout(int orientation, int x, int y)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(orientation) << qVariantFromValue(x) << qVariantFromValue(y);
        return callWithArgumentList(QDBus::Block, QLatin1String("setDesktopLayout"), argumentList);
    }

    inline QDBusReply<void> showWindowMenuAt(qlonglong winId, int x, int y)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(winId) << qVariantFromValue(x) << qVariantFromValue(y);
        return callWithArgumentList(QDBus::Block, QLatin1String("showWindowMenuAt"), argumentList);
    }

    inline Q_NOREPLY void unclutterDesktop()
    {
        QList<QVariant> argumentList;
        callWithArgumentList(QDBus::NoBlock, QLatin1String("unclutterDesktop"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace kde {
    typedef ::KWinAdaptor KWin;
  }
}
#endif
